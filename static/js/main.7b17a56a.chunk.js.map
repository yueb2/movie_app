{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","index","key","slice","App","state","isLoading","movies","getMoives","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"gTAuCeA,MA7Bf,YAA6D,EAA5CC,GAA6C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjD,OACE,yBAAKC,UAAU,SACb,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACb,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,UACXD,EAAOI,KAAI,SAACJ,EAAQK,GAAT,OACV,wBAAIC,IAAKD,EAAOJ,UAAU,iBACvBD,OAIP,uBAAGC,UAAU,kBAAkBH,EAAQS,MAAM,EAAG,KAAhD,UCmCOC,G,kNApDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAMVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IARzB,2C,kEAcVQ,KAAKN,c,+BAEG,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,6BAASV,UAAU,aAChBS,EACC,yBAAKT,UAAU,UACb,0BAAMA,UAAU,gBAAhB,YAGF,yBAAKA,UAAU,UACZU,EAAOP,KAAI,SAACe,GAAD,OACV,kBAAC,EAAD,CACEb,IAAKa,EAAMxB,GACXA,GAAIwB,EAAMxB,GACVC,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAMC,mBACdpB,OAAQmB,EAAMnB,kB,GA3CZqB,IAAMC,YCAxBC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.7b17a56a.chunk.js","sourcesContent":["//movie render\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n//state가 필요 없기 때문에, class component가 될 필요가 없다.\n//따라서 function component로 작성\n//css적용 : <h3 class=\"movie__title\" style={{ backgroundColor: \"green\" }}> 이런식으로 각각 적용 할 수 도 있으나, css file을 새로 만들어서 모아사용한다.\n//<label for ..> -> html 임. 하지만 javascript에서는 for이 loop이다.\n//따라서 jsx에서 <label for ..>은 <label htmlFor ..>로 작성해야 한다.\n//map function은 item뿐만아니라 item number(index)를 제공한다.\nfunction Movie({ id, year, title, summary, poster, genres }) {\n  return (\n    <div className=\"movie\">\n      <img src={poster} alt={title} title={title} />\n      <div className=\"movie__data\">\n        <h3 className=\"movie__title\">{title}</h3>\n        <h5 className=\"movie__year\">{year}</h5>\n        <ul className=\"genres\">\n          {genres.map((genres, index) => (\n            <li key={index} className=\"geners__genre\">\n              {genres}\n            </li>\n          ))}\n        </ul>\n        <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n      </div>\n    </div>\n  );\n}\n\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string,\n  genres: PropTypes.arrayOf(PropTypes.string.isRequired),\n};\n\nexport default Movie;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n//class component\n//state => object이고, component의 data를 넣을 공간이 있다. (data는 변한다. 즉, 바꾸고싶은 data를 state에 넣는다.)\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n\n  //axios.get은 그다지 빠르지 않음. -> 기다리는 시간필요.\n  //따라서 async, await을 써준다. -> 비동기 함수\n  //await이 붙은 것이 끝날때까지 기다렸다가 계속하라..\n  getMoives = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    this.setState({ movies, isLoading: false });\n  };\n  //axios 는 처리시간이 그리 빠르지 않다.\n  //따라서 javaScript에게 componentDidMount 함수가 끝날때 까지 약간의 시간이 걸릴수 있다고 말하구, 기다려야 한다. -> 이것을 위해 componentDidMount() 앞에 async를 넣거나 getMovie function을 하나 만든다.\n  //component가 mount되면 getMovies()를 호출한다.\n  componentDidMount() {\n    this.getMoives();\n  }\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n//<App /> : component라고 부른다. React는 component와 함께 동작하고, 모든것은 component이다.\n//react는 component를 사용해서 HTML처럼 작성하려는 경우에 필요하다. javascript와 HTML사이의 이러한 조합을 jsx라고 부른다.\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}